library(quanteda)
library(quanteda.textstats)
library(naivebayes)
library(randomForest)
library(iml)
library(future)
library(future.callr)
library(e1071)
library(reshape2)
library(cvTools)
library(caret)
library(ggplot2)
library(gridExtra)
# Directory della cartella condivisa
setwd(dirname(getActiveDocumentContext()$path))
# Dataset
StoresReview <- read_excel("GRUPPO 3-4-5. Industry elettronica.xlsx")
# Aggiunta Primary key
StoresReview$ID <- seq(1:nrow(StoresReview))
# Dataset con sole recensioni in italiano.
Ita_StoresReview <- StoresReview[(StoresReview$lang_value == "it" |
is.na(StoresReview$lang_value) == TRUE) &
is.na(StoresReview$text) == FALSE,]
# Corpus con i testi NON vuoti
Corpus_Totale <- corpus(Ita_StoresReview)
# Frequenze delle caratteristiche del Corpus
apply(textstat_summary(Corpus_Totale)[,2:11], 2, sum)
# DFM... MODIFICARE LE CONDIZIONI TRIMMING
Dfm_Totale <- dfm(tokens(Corpus_Totale,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_url = TRUE,
remove_numbers = TRUE) %>%
tokens_tolower() %>%
tokens_remove(c(stopwords("italian"))) %>%
tokens_wordstem(language = "italian")) %>%
dfm_trim(min_termfreq = 10,
min_docfreq = 2) # modificare le condizioni
# Lunghezza del DFM
summary(Dfm_Totale)
# Top parole del DFM
topfeatures(Dfm_Totale,300)
dfm(Corpus_Totale, select = "#*")
help(dfm)
dfm[, grepl("#", colnames(dfm))]
Dfm_Totale
colnames(Dfm_Totale)
colnames(Dfm_Totale)[grep("^#", colnames(Dfm_Totale))]
colnames(Dfm_Totale)[startsWith(...,"#")]
help("startswith")
help("startsWith")
startsWith(colnames(Dfm_Totale),"#")
colnames(Dfm_Totale)[startsWith(colnames(Dfm_Totale),"#")]
colnames(Dfm_Totale)[startsWith(colnames(Dfm_Totale),"@")]
Parole_Brutte <- c(colnames(Dfm_Totale)[startsWith(colnames(Dfm_Totale),"#")],
colnames(Dfm_Totale)[startsWith(colnames(Dfm_Totale),"@")])
Parole_Brutte
colnames(Dfm_Totale)[startsWith(colnames(Dfm_Totale),c("#","@"))]
colnames(Dfm_Totale)[startsWith(trimws(colnames(Dfm_Totale),c("#","@")))]
colnames(Dfm_Totale)[startsWith(trimws(colnames(Dfm_Totale), c("#", "@")))]
colnames(Dfm_Totale)[grepl("^\\s*[#@]", trimws(colnames(Dfm_Totale)))]
colnames(Dfm_Totale)[grepl("^s*[#@]", trimws(colnames(Dfm_Totale)))]
colnames(Dfm_Totale)[grepl("^[#@]", trimws(colnames(Dfm_Totale)))]
colnames(Dfm_Totale)[startsWith(colnames(Dfm_Totale),"^\\s*[#@]")]
colnames(Dfm_Totale)[startsWith(colnames(Dfm_Totale),"^[#@]")]
colnames(Dfm_Totale)[startsWith(colnames(Dfm_Totale),"^s*[#@]")]
colnames(Dfm_Totale)[grepl("^\\s*[#@]", trimws(colnames(Dfm_Totale)))]
Parole_Brutte <- colnames(Dfm_Totale)[grepl("^\\s*[#@]", trimws(colnames(Dfm_Totale)))]
Parole_Brutte <- c(colnames(Dfm_Totale)[startsWith(colnames(Dfm_Totale),"#")],
colnames(Dfm_Totale)[startsWith(colnames(Dfm_Totale),"@")])
colnames(Dfm_Totale)[grepl("^\\s*[#@]", trimws(colnames(Dfm_Totale)))]
Parole_Brutte
sort(Parole_Brutte) == sort(colnames(Dfm_Totale)[grepl("^\\s*[#@]", trimws(colnames(Dfm_Totale)))])
Parole_Brutte <- colnames(Dfm_Totale)[grepl("^\\s*[#@]", trimws(colnames(Dfm_Totale)))]
Dfm_Totale <- Dfm_Totale[,!(colnames(Dfm_Totale) %in% Parole_Brutte)]
# Top parole del DFM
topfeatures(Dfm_Totale,300)
Parole_Popolari <- textstat_frequency(Dfm_Totale, n =20)
View(Parole_Popolari)
# DFM... MODIFICARE LE CONDIZIONI TRIMMING
Dfm_Totale <- dfm(tokens(Corpus_Totale,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_url = TRUE,
remove_numbers = TRUE) %>%
tokens_tolower() %>%
tokens_remove(c(stopwords("italian"))) %>%
tokens_wordstem(language = "italian")) %>%
dfm_trim(min_termfreq = 10,
max_termfreq = 500,
min_docfreq = 2)
# Toglie i tag e gli hashtag
Parole_Brutte <- colnames(Dfm_Totale)[grepl("^\\s*[#@]", trimws(colnames(Dfm_Totale)))]
Dfm_Totale <- Dfm_Totale[,!(colnames(Dfm_Totale) %in% Parole_Brutte)]
Parole_Popolari <- textstat_frequency(Dfm_Totale, n =20)
View(Parole_Popolari)
ggplot(TopFeatures, aes(x=frequency, y=feature)) +
geom_point(size = 1.5, color = "Darkorange2") +
theme_bw() +
theme(axis.text.x = element_text(angle=360, hjust=1)) +
labs(x = "Features", y = "Frequenza",
title = "Le 20 parole più frequenti nei tweet sulla campagna #OpenToMeraviglia") +
theme(plot.title = element_text(color = "Darkorange2", size = 11, face = "bold"),
plot.subtitle = element_text(color = "black", size = 11, face = "italic" ))
ggplot(Parole_Popolari, aes(x=frequency, y=feature)) +
geom_point(size = 1.5, color = "Darkorange2") +
theme_bw() +
theme(axis.text.x = element_text(angle=360, hjust=1)) +
labs(x = "Features", y = "Frequenza",
title = "Le 20 parole più frequenti nelle recensioni") +
theme(plot.title = element_text(color = "Darkorange2", size = 11, face = "bold"),
plot.subtitle = element_text(color = "black", size = 11, face = "italic" ))
Parole_Popolari$feature <- with(Parole_Popolari, reorder(feature, frequency))
ggplot(Parole_Popolari, aes(x=frequency, y=feature)) +
geom_point(size = 1.5, color = "Darkorange2") +
theme_bw() +
theme(axis.text.x = element_text(angle=360, hjust=1)) +
labs(x = "Features", y = "Frequenza",
title = "Le 20 parole più frequenti nelle recensioni") +
theme(plot.title = element_text(color = "Darkorange2", size = 11, face = "bold"),
plot.subtitle = element_text(color = "black", size = 11, face = "italic" ))
textplot_wordcloud(OpenToMeraviglia_dfm_Trim,
min_size = 1.5,   #dimensione minima delle parole
max_size = 4,     #dimensione max
min.count = 10,    #inserisci una parola presente almeno n volte
max_words = 50,  #numero massimo di parole da visualizzare
random.order = FALSE,  #visualizzate in ordine di frequenza, se TRUE
#la grandezza delle parole verrà attribuita casualmente
random_color = FALSE,  #se FALSE i colori sono gli stessi per parole dello stesso "livello di importanza"
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,   #dimensione minima delle parole
max_size = 4,     #dimensione max
min.count = 10,    #inserisci una parola presente almeno n volte
max_words = 50,  #numero massimo di parole da visualizzare
random.order = FALSE,  #visualizzate in ordine di frequenza, se TRUE
#la grandezza delle parole verrà attribuita casualmente
random_color = FALSE,  #se FALSE i colori sono gli stessi per parole dello stesso "livello di importanza"
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
# 1: Pulizia e Preparazione dei dati ----
install.packages("tm")
library(tm)
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,   #dimensione minima delle parole
max_size = 4,     #dimensione max
min.count = 10,    #inserisci una parola presente almeno n volte
max_words = 50,  #numero massimo di parole da visualizzare
random.order = FALSE,  #visualizzate in ordine di frequenza, se TRUE
#la grandezza delle parole verrà attribuita casualmente
random_color = FALSE,  #se FALSE i colori sono gli stessi per parole dello stesso "livello di importanza"
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,   #dimensione minima delle parole
max_size = 4,     #dimensione max
min.count = 10,    #inserisci una parola presente almeno n volte
max_words = 50,  #numero massimo di parole da visualizzare
random.order = FALSE,  #visualizzate in ordine di frequenza, se TRUE
#la grandezza delle parole verrà attribuita casualmente
random_color = FALSE,  #se FALSE i colori sono gli stessi per parole dello stesso "livello di importanza"
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
library(tm)
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,   #dimensione minima delle parole
max_size = 4,     #dimensione max
min.count = 10,    #inserisci una parola presente almeno n volte
max_words = 50,  #numero massimo di parole da visualizzare
random.order = FALSE,  #visualizzate in ordine di frequenza, se TRUE
#la grandezza delle parole verrà attribuita casualmente
random_color = FALSE,  #se FALSE i colori sono gli stessi per parole dello stesso "livello di importanza"
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
col <- sapply(seq(0.4, 1, 0.3), function(x) adjustcolor("#F27349", x))
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,
max_size = 4,
min.count = 10,
max_words = 50,
random.order = FALSE,
random_color = FALSE,
rotation = 0,
colors = col)
# 1: Pulizia e Preparazione dei dati ----
install.packages("wordcloud")
library(wordcloud)
# Top parole del DFM
topfeatures(Dfm_Totale,300)
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,
max_size = 4,
min.count = 10,
max_words = 50,
random.order = FALSE,
random_color = FALSE,
rotation = 0,
colors = RColorBrewer::brewer.pal(8,"Dark2"))
wordcloud(colnames(Dfm_Totale),
min.freq = 10,
random.order = FALSE,
random.color = FALSE,
colors = RColorBrewer::brewer.pal(8,"Dark2"),
max.words = 50)
wordcloud(colnames(Dfm_Totale),
min.freq = 10,
random.order = FALSE,
random.color = FALSE,
max.words = 50)
warnings()
Matrice_Training
help(multinomial_naive_bayes)
help("multinomial_naive_bayes")
summary(NaiveBayesModel)
summary(NaiveBayesModel)
Matrice_Training
View(Places_ita)
View(Test_data)
# Frequenze delle caratteristiche del Corpus
apply(textstat_summary(Corpus_Totale)[,2:11], 2, sum)
# Dataset
library(readxl)
library(writexl)
# Directory
library(rstudioapi)
# Pre-processing
library(quanteda)
library(quanteda.textstats)
# Algoritmi
library(naivebayes)
library(randomForest)
library(iml)
library(future)
library(future.callr)
library(e1071)
library(reshape2)
library(cvTools)
library(caret)
# Grafici
library(ggplot2)
library(gridExtra)
# Corpus
Corpus_Totale <- corpus(Ita_StoresReview)
# Modo per ottenere gli ID
attr(Corpus_Totale, "docvars")$ID
# Frequenze delle caratteristiche del Corpus
apply(textstat_summary(Corpus_Totale)[,2:11], 2, sum)
# Toglie i tag e gli hashtag
Parole_Brutte <- colnames(Dfm_Totale)[grepl("^\\s*[#@]", trimws(colnames(Dfm_Totale)))]
# Corpus
Corpus_Totale <- corpus(Ita_StoresReview)
Corpus_Totale
str(Corpus_Totale)
# Frequenze delle caratteristiche del Corpus
apply(textstat_summary(Corpus_Totale)[,2:11], 2, sum)
# DFM... MODIFICARE LE CONDIZIONI TRIMMING
Dfm_Totale <- dfm(tokens(Corpus_Totale,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_url = TRUE,
remove_numbers = TRUE) %>%
tokens_tolower() %>%
tokens_remove(c(stopwords("italian"))) %>%
tokens_wordstem(language = "italian")) %>%
dfm_trim(min_termfreq = 10,
min_docfreq = 2)
# Top parole del DFM
topfeatures(Dfm_Totale,300)
# DFM... MODIFICARE LE CONDIZIONI TRIMMING
Dfm_Totale <- dfm(tokens(Corpus_Totale,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_url = TRUE,
remove_numbers = TRUE) %>%
tokens_tolower() %>%
tokens_remove(c(stopwords("italian"))) %>%
tokens_wordstem(language = "italian")) %>%
dfm_trim(min_termfreq = 10,
max_termfreq = 500,
min_docfreq = 2)
# Top parole del DFM
topfeatures(Dfm_Totale,300)
startsWith(colnames(Dfm_Totale),"@")
colnames(Dfm_Totale)[startsWith(colnames(Dfm_Totale),"@")]
colnames(Dfm_Totale)[startsWith(colnames(Dfm_Totale),"#")]
# Toglie i tag e gli hashtag
Parole_Brutte <- colnames(Dfm_Totale)[grepl("^\\s*[#@]", trimws(colnames(Dfm_Totale)))]
Dfm_Totale <- Dfm_Totale[,!(colnames(Dfm_Totale) %in% Parole_Brutte)]
# Top parole del DFM
topfeatures(Dfm_Totale,300)
Parole_Popolari <- textstat_frequency(Dfm_Totale, n =20)
Parole_Popolari$feature <- with(Parole_Popolari, reorder(feature, frequency))
ggplot(Parole_Popolari, aes(x=frequency, y=feature)) +
geom_point(size = 1.5, color = "Darkorange2") +
theme_bw() +
theme(axis.text.x = element_text(angle=360, hjust=1)) +
labs(x = "Features", y = "Frequenza",
title = "Le 20 parole più frequenti nelle recensioni") +
theme(plot.title = element_text(color = "Darkorange2", size = 11, face = "bold"),
plot.subtitle = element_text(color = "black", size = 11, face = "italic" ))
colnames(Dfm_Totale)[which("c'è")] <- NULL
NULL
colnames(Dfm_Totale)[which(colnames(Dfm_Totale) == "c'è")] <- NULL
# Top parole del DFM
topfeatures(Dfm_Totale,300)
lenght(colnames(Dfm_Totale))
dim(Dfm_Totale)
textplot_wordcloud(Dfm_PizzerieNapoletane_reviews,
min_size = 1.5,
max_size = 4,
min.count = 10,
max_words = 50,
random.order = FALSE,
random_color = FALSE,
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,
max_size = 4,
min.count = 10,
max_words = 50,
random.order = FALSE,
random_color = FALSE,
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
# LIBRERIE ----
install.packages("quanteda.textplots")
library(quanteda.textplots)
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,
max_size = 4,
min.count = 10,
max_words = 50,
random.order = FALSE,
random_color = FALSE,
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,
max_size = 10,
min.count = 10,
max_words = 50,
random.order = FALSE,
random_color = FALSE,
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
# Top parole del DFM
topfeatures(Dfm_Totale,869)
View(StoresReview)
Dfm_Places <- dfm(tokens(Places_Corpus,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_url = TRUE,
remove_numbers = TRUE) %>%
tokens_tolower() %>%
tokens_remove(c(stopwords("italian")) %>%
tokens_wordstem(language = "italian")) %>%
dfm_trim(min_termfreq = 10,
max_termfreq = 500,
min_docfreq = 2))
Dfm_Places <- dfm(tokens(Places_Corpus,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_url = TRUE,
remove_numbers = TRUE) %>%
tokens_tolower() %>%
tokens_remove(c(stopwords("italian"))) %>%
tokens_wordstem(language = "italian")) %>%
dfm_trim(min_termfreq = 10,
max_termfreq = 500,
min_docfreq = 2)
dim(Dfm_Places)
# Top parole del DFM
topfeatures(Dfm_Places,235)
Parole_Popolari <- textstat_frequency(Dfm_Places, n =20)
Parole_Popolari$feature <- with(Parole_Popolari, reorder(feature, frequency))
ggplot(Parole_Popolari, aes(x=frequency, y=feature)) +
geom_point(size = 1.5, color = "Darkorange2") +
theme_bw() +
theme(axis.text.x = element_text(angle=360, hjust=1)) +
labs(x = "Features", y = "Frequenza",
title = "Le 20 parole più frequenti nelle recensioni") +
theme(plot.title = element_text(color = "Darkorange2", size = 11, face = "bold"),
plot.subtitle = element_text(color = "black", size = 11, face = "italic" ))
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,
max_size = 10,
min.count = 10,
max_words = 50,
random.order = FALSE,
random_color = FALSE,
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
ggplot(Parole_Popolari, aes(x=frequency, y=feature)) +
geom_point(size = 1.5, color = "Darkorange2") +
theme_bw() +
theme(axis.text.x = element_text(angle=360, hjust=1)) +
labs(x = "Features", y = "Frequenza",
title = "Le 20 parole più frequenti nelle recensioni") +
theme(plot.title = element_text(color = "Darkorange2", size = 11, face = "bold"),
plot.subtitle = element_text(color = "black", size = 11, face = "italic" ))
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,
max_size = 10,
min.count = 10,
max_words = 50,
random.order = FALSE,
random_color = FALSE,
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
# Top parole del DFM
topfeatures(Dfm_Places,235)
Driver <- dictionary(Prezzo = c("offert*","scont*","prezz*","vend*","cost*","sottocost*"),
Servizio = c("personal*","serviz*","gentil*","professional*","competent*","aiut*","cortes*","assistent*","disponibil*"),
Ordini = c("ordin*","consegn*","ritir*","garanz*","online*"),
Location = c("negoz*","post*"))
Driver <- dictionary(list(Prezzo = c("offert*","scont*","prezz*","vend*","cost*","sottocost*"),
Servizio = c("personal*","serviz*","gentil*","professional*","competent*","aiut*","cortes*","assistent*","disponibil*"),
Ordini = c("ordin*","consegn*","ritir*","garanz*","online*"),
Location = c("negoz*","post*")))
Driver
Driver_Review <- dfm_lookup(Dfm_Totale,Driver)
Driver_Review
apply(textstat_summary(Driver_Review)[,2:5], 2, sum)
apply(Driver_Review[,2:5], 2, sum)
type(Driver_Review)
typeof(Driver_Review)
str(Driver_Review)
Driver_Review
apply(colnames(Driver_Review)[2:5], 2, sum)
apply(colnames(Driver_Review), 2, sum)
Driver_Review
Driver_Review_Convertito <- as.data.frame(Driver_Review)
Driver_Review_Convertito <- convert(Driver_Review, to = "data.frame")
View(Driver_Review_Convertito)
rm(Driver_Review_Convertito)
Driver_Conv_Rev <- convert(Driver_Review, to = "data.frame")
View(Driver_Conv_Rev)
apply(Driver_Conv_Rev[,2:5],2,sum)
prop.table(apply(Driver_Conv_Rev[,2:5],2,sum))
Parole_Popolari <- textstat_frequency(Dfm_Totale, n =50)
Parole_Popolari$feature <- with(Parole_Popolari, reorder(feature, frequency))
ggplot(Parole_Popolari, aes(x=frequency, y=feature)) +
geom_point(size = 1.5, color = "Darkorange2") +
theme_bw() +
theme(axis.text.x = element_text(angle=360, hjust=1)) +
labs(x = "Features", y = "Frequenza",
title = "Le 20 parole più frequenti nelle recensioni") +
theme(plot.title = element_text(color = "Darkorange2", size = 11, face = "bold"),
plot.subtitle = element_text(color = "black", size = 11, face = "italic" ))
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,
max_size = 10,
min.count = 10,
max_words = 50,
random.order = FALSE,
random_color = FALSE,
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,
max_size = 20,
min.count = 10,
max_words = 50,
random.order = FALSE,
random_color = FALSE,
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,
max_size = 15,
min.count = 10,
max_words = 50,
random.order = FALSE,
random_color = FALSE,
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
textplot_wordcloud(Dfm_Totale,
min_size = 1.5,
max_size = 12,
min.count = 10,
max_words = 50,
random.order = FALSE,
random_color = FALSE,
rotation = 0,    #rotazione delle parole
colors = RColorBrewer::brewer.pal(8,"Dark2"))
# Top parole del DFM
topfeatures(Dfm_Totale,50)
apply(Driver_Conv_Rev[,2:5],2,sum)
prop.table(apply(Driver_Conv_Rev[,2:5],2,sum))
prop.table(apply(Driver_Conv_Rev[,2:5],2,sum))
Driver <- dictionary(list(Prezzo = c("offert*","scont*","prezz*","vend*","cost*","sottocost*", "economic*"),
Servizio = c("personal*","serviz*","gentil*","professional*","competent*","aiut*","cortes*","assistent*","disponibil*","cordial*",
"scortes*","male*","lent*","disorg*","disorie*"),
Ordini = c("ordin*","consegn*","ritir*","garanz*","online*"),
Location = c("negoz*","post*","parchegg*","affollat*","piccol*","disord*")))
Driver_Review <- dfm_lookup(Dfm_Totale,Driver)
Driver_Conv_Rev <- convert(Driver_Review, to = "data.frame")
apply(Driver_Conv_Rev[,2:5],2,sum)
prop.table(apply(Driver_Conv_Rev[,2:5],2,sum))
sum(prop.table(apply(Driver_Conv_Rev[,2:5],2,sum)))
apply(Driver_Conv_Rev[,2:5],2,sum)
apply(Driver_Conv_Rev[,2:5],2,sum)
Driver <- dictionary(list(Prezzo = c("offert*","scont*","prezz*","vend*","cost*","sottocost*", "economic*"),
Servizio = c("personal*","serviz*","gentil*","professional*","competent*","aiut*","cortes*","assistent*","disponibil*","cordial*",
"scortes*","male*","lent*","disorg*","disorie*"),
Ordini = c("ordin*","consegn*","ritir*","garanz*","online*","spedi*","reso","account"),
Location = c("negoz*","post*","parchegg*","affollat*","piccol*","disord*")))
Driver_Review <- dfm_lookup(Dfm_Totale,Driver)
Driver_Conv_Rev <- convert(Driver_Review, to = "data.frame")
apply(Driver_Conv_Rev[,2:5],2,sum)
