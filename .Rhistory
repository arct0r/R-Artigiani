xlab("Rating") +
guides(fill=guide_legend(title="sentiment")) +
theme(plot.title = element_text(color = "black", size = 12, face = "plain"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"))
ggplot(RatingXsentiment,aes(Rating, Freq, fill=Sentiment))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#CA3432", "darkseagreen")) +
labs(title = "Sentiment rispetto al rating") +
theme(axis.text.x = element_text(color="#993333", angle=90)) +
coord_flip() +
ylab(label="Valori assoluti") +
xlab("Rating") +
guides(fill=guide_legend(title="sentiment")) +
theme(plot.title = element_text(color = "black", size = 12, face = "plain"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"))
ggplot(RatingXsentiment,aes(Rating, Freq, fill=Sentiment))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#CA3432", "darkseagreen")) +
labs(title = "Sentiment rispetto al rating") +
theme(axis.text.x = element_text(color="#993333", angle=90)) +
coord_flip() +
ylab(label="Frequenza assoluta") +
xlab("Rating") +
guides(fill=guide_legend(title="Sentiment:")) +
theme(plot.title = element_text(color = "black", size = 12, face = "plain"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"))
EmotionAnalysis <- get_nrc_sentiment(Corpus_Totale)
# Grafico che mostra le emozioni rilevate e le sue quantitÃ 
barplot(
sort(colSums(prop.table(EmotionAnalysis[, 1:8]))),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Le emozioni nel corpus", xlab="Proporzioni",
col = "#8C96C6"
)
DriverAnalysis_SemiSupervisedApproach <- dfm(tokens(Corpus_Totale,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_url = TRUE,
remove_numbers = TRUE) %>%
tokens_tolower() %>%
tokens_wordstem(language = "italian") %>%
tokens_lookup(dictionary = Driver))
TextModel <- textmodel_newsmap(Dfm_Totale,
DriverAnalysis_SemiSupervisedApproach)
DriverAnalysis$SemiSupervised <- predict(TextModel)
round(prop.table(table(predict(TextModel))), 2)*100
DriverAnalysis$Dizionario <- ifelse(DriverAnalysis$prezzo > 0, "Prezzo",
ifelse(DriverAnalysis$servizio > 0, "Servizio",
ifelse(DriverAnalysis$ordini > 0, "Ordini",
ifelse(DriverAnalysis$location > 0, "Location", "NA"))))
ConfrontoRisultati <- filter(DriverAnalysis, Dizionario == "NA")
DriverAnalysis$doc_id <- NULL
DriverAnalysis <- DriverAnalysis[is.na(DriverAnalysis$SemiSupervised) == FALSE,]
# TABELLA GENERALE
Generale <- DriverAnalysis %>%
group_by(Player) %>%
summarise(n_rev = length(text),
media_rating = round(mean(score_rating,na.rm = TRUE),2),
media_sentiment = round(mean(sentimentAnalysis),2))
View(Generale)
DriverAnalysis <- DriverAnalysis[is.na(DriverAnalysis$SemiSupervised) == FALSE &
is.na(DriverAnalysis$Player) == FALSE,]
# TABELLA GENERALE
Generale <- DriverAnalysis %>%
group_by(Player) %>%
summarise(n_rev = length(text),
media_rating = round(mean(score_rating,na.rm = TRUE),2),
media_sentiment = round(mean(sentimentAnalysis),2))
View(Generale)
apply(DriverAnalysis, 2, function(x) sum(is.na(x)))
# TABELLA GENERALE
# Recensioni, rating e sentiment in base al brand
Generale <- DriverAnalysis %>%
group_by(Player) %>%
summarise(n_rec = length(text),
media_rating = round(mean(score_rating,na.rm = TRUE),2),
media_sentiment = round(mean(sentimentAnalysis),2))
# Pre ottenere una tabella a colori abbiamo usato una funzione alternativa
Generale_ft <- flextable(Generale)
Generale_ft |>
bg(j = c("media_rating","media_sentiment"),
bg = scales::col_quantile(palette = c("wheat", "red"), domain =NULL))
for (i in levels(DriverAnalysis$SemiSupervised)){
df_i <- DriverAnalysis %>%
filter(SemiSupervised == i)
summary_i <- df_i %>%
group_by(Player) %>%
summarise(n_rev = length(text),
media_rating = round(mean(score_rating,na.rm = TRUE),2),
media_sentiment = round(mean(sentimentAnalysis),2))
Generale <- inner_join(Generale,summary_i,
by = "Player")
}
names(Generale) <- c("Player", rep(c("Numero reviews","Media score","Media sentiment"),
length(levels(DriverAnalysis$SemiSupervised))+1))
# TABELLA DRIVER RATING
kbl(Generale) %>%
kable_classic() %>%
column_spec(c(4,7,10,13,16), color = "white",
background = spec_color(Generale$`Media sentiment`, end =1, palette = c("red","orange","green"))) %>%
column_spec(c(3,6,9,12,15), color = "white",
background = spec_color(Generale$`Media score`, end =1, palette = c("red", "orange","green"))) %>%
add_header_above(c(" " = 1," Generale" = 3, "Prezzo" = 3,"Servizio" = 3,"Ordini" = 3,"Location" = 3))
# check
table(Ita_StoresReview$score_rating, Ita_StoresReview$NB_sentiment)
# DISTRIBUZIONE SENTIMENT PER BRAND
Brand_sentiment <- as.data.frame(table(Ita_StoresReview$Player, Ita_StoresReview$NB_sentiment))
Brand_sentiment <- rename(
Brand_sentiment,
"Brand" = "Var1",
"Sentiment" = "Var2"
)
ggplot(Brand_sentiment,aes(x = Brand, y = Freq, fill = Sentiment))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#993333", "grey", "darkseagreen")) +
labs(title = "Come varia il sentiment nei diversi brand?") +
coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Sentiment")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
# TABELLA DRIVER RATING
kbl(Generale) %>%
kable_classic() %>%
column_spec(c(4,7,10,13,16), color = "white",
background = spec_color(Generale$`Media sentiment`, end =1, palette = c("red","orange","green"))) %>%
column_spec(c(3,6,9,12,15), color = "white",
background = spec_color(Generale$`Media score`, end =1, palette = c("red", "orange","green"))) %>%
add_header_above(c(" " = 1," Generale" = 3, "Prezzo" = 3,"Servizio" = 3,"Ordini" = 3,"Location" = 3))
# TABELLA DRIVER RATING
kbl(Generale) %>%
kable_classic() %>%
column_spec(c(4,7,10,13,16), color = "white",
background = spec_color(Generale$`Media sentiment`, end =1, palette = c("red","orange","green"))) %>%
add_header_above(c(" " = 1," Generale" = 3, "Prezzo" = 3,"Servizio" = 3,"Ordini" = 3,"Location" = 3))
# TABELLA DRIVER RATING
kbl(Generale) %>%
kable_classic() %>%
column_spec(c(4,7,10,13,16), color = "white",
background = spec_color(Generale$`Media sentiment`, end =1, palette = c("red","orange","green"))) %>%
column_spec(c(3,6,9,12,15), color = "white",
background = spec_color(Generale$`Media score`, end =1, palette = c("red", "orange","green"))) %>%
add_header_above(c(" " = 1," Generale" = 3, "Prezzo" = 3,"Servizio" = 3,"Ordini" = 3,"Location" = 3))
# check
table(Ita_StoresReview$score_rating, Ita_StoresReview$NB_sentiment)
# DISTRIBUZIONE SENTIMENT PER BRAND
Brand_sentiment <- as.data.frame(table(Ita_StoresReview$Player, Ita_StoresReview$NB_sentiment))
Brand_sentiment <- rename(
Brand_sentiment,
"Brand" = "Var1",
"Sentiment" = "Var2"
)
ggplot(Brand_sentiment,aes(x = Brand, y = Freq, fill = Sentiment))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#993333", "grey", "darkseagreen")) +
labs(title = "Come varia il sentiment nei diversi brand?") +
coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Sentiment")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
# DISTRIBUZIONE RATING PER BRAND
Brand_rating <- as.data.frame(table(Ita_StoresReview$Player, Ita_StoresReview$score_rating))
Brand_rating <- rename(
Brand_rating,
"Brand" = "Var1",
"Rating" = "Var2"
)
ggplot(Brand_rating,aes(x = Brand, y = Freq, fill = Rating))+
geom_bar(position="dodge",stat="identity") +
scale_fill_manual(values = c("#993333", "#FF5733", "#FFC300", "#DAF7A6", "#7FFF00")) +
labs(title = "Come varia il rating nei diversi brand?") +
#rappresentiamo le barre in orizzontale (inverte gli assi)
#coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Rating")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
# RELAZIONE TRA SENTIMENT E RATING
cross_tab <- table(Ita_StoresReview$NB_sentiment, Ita_StoresReview$score_rating)
# Creazione di un grafico a matrice di confusione
heatmap(cross_tab, col = colorRampPalette(c("blue", "white", "red"))(256), main = "Matrice di confusione tra Sentiment e Rating")
legend("topright", legend = c("Basso", "Medio", "Alto"), fill = c("blue", "white", "red"), title = "Rating")
apply(DriverAnalysis, 2, function(x) sum(is.na(x)))
Mediaworld_driver <- DriverAnalysis[DriverAnalysis$Player == "Mediaworld",c(14,15)]
Mediaworld_driver <- as.data.frame(table(Mediaworld_driver$sentiment_labels, Mediaworld_driver$SemiSupervised))
View(Mediaworld_driver)
View(Mediaworld_driver)
ggplot(Mediaworld_driver,aes(x = Driver, y = Freq, fill = Sentiment))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#993333", "darkseagreen")) +
labs(title = "Mediaworld",
subtitle = "Come varia il sentiment nei diversi driver?") +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Sentiment")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
View(DriverAnalysis)
# TORTE PER OGNI BRAND CHE MOSTRA LA DISTRIBUZIONE DEI DRIVER
Mediaworld_driver <- DriverAnalysis[DriverAnalysis$Player == "Mediaworld",c(15,16)]
View(Mediaworld_driver)
Mediaworld_driver <- DriverAnalysis[DriverAnalysis$Player == "Mediaworld",c(15,16)]
Mediaworld_driver <- as.data.frame(table(Mediaworld_driver$sentiment_labels, Mediaworld_driver$SemiSupervised))
Unieuro_driver <- DriverAnalysis[DriverAnalysis$Player == "Unieuro",c(15,16)]
Unieuro_driver <- as.data.frame(table(Unieuro_driver$sentiment_labels, Unieuro_driver$SemiSupervised))
Euronics_driver <- DriverAnalysis[DriverAnalysis$Player == "Euronics",c(15,16)]
Euronics_driver <- as.data.frame(table(Euronics_driver$sentiment_labels, Euronics_driver$SemiSupervised))
Mediaworld_driver <- rename(
Mediaworld_driver,
"Sentiment" = "Var1",
"Driver" = "Var2"
)
Unieuro_driver <- rename(
Unieuro_driver,
"Sentiment" = "Var1",
"Driver" = "Var2"
)
Euronics_driver <- rename(
Euronics_driver,
"Sentiment" = "Var1",
"Driver" = "Var2"
)
ggplot(Mediaworld_driver,aes(x = Driver, y = Freq, fill = Sentiment))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#993333", "darkseagreen")) +
labs(title = "Mediaworld",
subtitle = "Come varia il sentiment nei diversi driver?") +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Sentiment")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
ggplot(Unieuro_driver,aes(x = Driver, y = Freq, fill = Sentiment))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#993333", "darkseagreen")) +
labs(title = "Unieuro",
subtitle = "Come varia il sentiment nei diversi driver?") +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Sentiment")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
ggplot(Euronics_driver,aes(x = Driver, y = Freq, fill = Sentiment))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#993333", "darkseagreen")) +
labs(title = "Euronics",
subtitle = "Come varia il sentiment nei diversi driver?") +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Sentiment")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
# TABELLA DRIVER RATING
kbl(Generale) %>%
kable_classic() %>%
column_spec(c(4,7,10,13,16), color = "white",
background = spec_color(Generale$`Media sentiment`, end =1, palette = c("red","orange","green"))) %>%
column_spec(c(3,6,9,12,15), color = "white",
background = spec_color(Generale$`Media score`, end =1, palette = c("red", "orange","green"))) %>%
add_header_above(c(" " = 1," Generale" = 3, "Prezzo" = 3,"Servizio" = 3,"Ordini" = 3,"Location" = 3))
kbl(Generale) %>%
kable_classic() %>%
column_spec(1:ncol(Generale), background = "white") %>%
row_spec(which(Generale$`Media sentiment` < 0.4), background = "red") %>%
row_spec(which(Generale$`Media sentiment` >= 0.4 & Generale$`Media sentiment` < 0,7), background = "orange") %>%
row_spec(which(Generale$`Media sentiment` >= 0.7), background = "green") %>%
row_spec(which(Generale$`Media score` < 3), background = "red") %>%
row_spec(which(Generale$`Media score` >= 3 & Generale$`Media score` < 4), background = "orange") %>%
row_spec(which(Generale$`Media score` >= 4), background = "green") %>%
add_header_above(c(" " = 1, "Generale" = 3, "Prezzo" = 3, "Servizio" = 3, "Ordini" = 3, "Location" = 3))
kbl(Generale) %>%
kable_classic() %>%
column_spec(c(4,7,10,13,16), background = "white") %>%
row_spec(which(Generale$`Media sentiment` < 0.4), background = "red") %>%
row_spec(which(Generale$`Media sentiment` >= 0.4 & Generale$`Media sentiment` < 0,7), background = "orange") %>%
row_spec(which(Generale$`Media sentiment` >= 0.7), background = "green") %>%
row_spec(which(Generale$`Media score` < 3), background = "red") %>%
row_spec(which(Generale$`Media score` >= 3 & Generale$`Media score` < 4), background = "orange") %>%
row_spec(which(Generale$`Media score` >= 4), background = "green") %>%
add_header_above(c(" " = 1, "Generale" = 3, "Prezzo" = 3, "Servizio" = 3, "Ordini" = 3, "Location" = 3))
kbl(Generale) %>%
kable_classic() %>%
column_spec(c(4,7,10,13,16), background = "white") %>%
row_spec(which(Generale$`Media sentiment` < 0.4), background = "red") %>%
row_spec(which(Generale$`Media sentiment` >= 0.4 & Generale$`Media sentiment` < 0,7), background = "orange") %>%
row_spec(which(Generale$`Media sentiment` >= 0.7), background = "green") %>%
row_spec(which(Generale$`Media score` < 3), background = "red") %>%
row_spec(which(Generale$`Media score` >= 3 & Generale$`Media score` < 4), background = "orange") %>%
row_spec(which(Generale$`Media score` >= 4), background = "green") %>%
add_header_above(c(" " = 1, "Generale" = 3, "Prezzo" = 3, "Servizio" = 3, "Ordini" = 3, "Location" = 3))
kbl(Generale) %>%
kable_classic() %>%
column_spec(1:ncol(Generale), background = "white") %>%
column_spec(which(Generale$`Media sentiment` < 0.4), background = "red") %>%
column_spec(which(Generale$`Media sentiment` >= 0.4 & Generale$`Media sentiment` < 0,7), background = "orange") %>%
column_spec(which(Generale$`Media sentiment` >= 0.7), background = "green") %>%
column_spec(which(Generale$`Media score` < 3), background = "red") %>%
column_spec(which(Generale$`Media score` >= 3 & Generale$`Media score` < 4), background = "orange") %>%
column_spec(which(Generale$`Media score` >= 4), background = "green") %>%
add_header_above(c(" " = 1, "Generale" = 3, "Prezzo" = 3, "Servizio" = 3, "Ordini" = 3, "Location" = 3))
kbl(Generale) %>%
kable_classic() %>%
column_spec(which(Generale$`Media sentiment` < 0.4), background = "red") %>%
column_spec(which(Generale$`Media sentiment` >= 0.4 & Generale$`Media sentiment` < 0,7), background = "orange") %>%
column_spec(which(Generale$`Media sentiment` >= 0.7), background = "green") %>%
column_spec(which(Generale$`Media score` < 3), background = "red") %>%
column_spec(which(Generale$`Media score` >= 3 & Generale$`Media score` < 4), background = "orange") %>%
column_spec(which(Generale$`Media score` >= 4), background = "green") %>%
add_header_above(c(" " = 1, "Generale" = 3, "Prezzo" = 3, "Servizio" = 3, "Ordini" = 3, "Location" = 3))
kbl(Generale) %>%
kable_classic() %>%
column_spec(C(4,7,10,13,16), color = "white",
ifelse(Generale$`Media sentiment` > 0.5, background = "green", "red")) %>%
add_header_above(c(" " = 1, "Generale" = 3, "Prezzo" = 3, "Servizio" = 3, "Ordini" = 3, "Location" = 3))
View(Generale)
View(Generale)
colnames(Generale)
Generale <- Generale %>%
mutate(
Generale$`Media score` = cell_spec(Generale$`Media score`, color = ifelse(Generale$`Media score` >= 4, "green", "red")),
Generale <- Generale %>%
mutate(
Generale$`Media score` = cell_spec(Generale$`Media score`, color = ifelse(Generale$`Media score` >= 4, "green", "red")),
Generale <- Generale %>%
mutate(
`Media score` = cell_spec(`Media score`, color = ifelse(`Media score` >= 4, "green", "red")),
`Media sentiment` = cell_spec(`Media sentiment`, color = ifelse(`Media sentiment` > 0.5, "green", "red"))
)
# Distribuzione del sentiment sul training
summary(NaiveBayesModel)
library(readxl)
library(writexl)
# Directory
library(rstudioapi)
# Pre-processing
library(quanteda)
library(quanteda.textstats)
library(SnowballC) # stemming delle keywords
# Driver Analysis
library(dplyr)
library(syuzhet)
library(newsmap)
# Algoritmi
library(naivebayes)
library(randomForest)
library(iml)
library(future)
library(future.callr)
library(e1071)
library(reshape2)
library(cvTools)
library(caret)
# Grafici
library(ggplot2)
library(gridExtra)
library(quanteda.textplots)
# Tabelle
library(kableExtra)
library(flextable)
library(officer)
# Distribuzione del sentiment sul training
summary(NaiveBayesModel)
# frequenze assolute sui 3400 testi del test
table(Test_predictedNB)
plot(RF, type = "l", col = c("black", "steelblue4", "violetred4", "springgreen4"), lty = 1,
main = "Errori del modello Random Forest: variabile sentiment") +
legend("topright", horiz = FALSE, cex = 0.7, title = "Errori:",
fill = c("springgreen4", "black", "steelblue4", "violetred4"),
legend = c("Positivo", "Medio", "Negativo", "Neutro"))
plot(RF, type = "l", col = c("black", "steelblue4", "violetred4", "springgreen4"), lty = 1,
main = "Errori del modello Random Forest: variabile sentiment") +
legend("topright", horiz = FALSE, cex = 0.7, title = "Errori:",
fill = c("springgreen4", "black", "steelblue4", "violetred4"),
legend = c("Positivo", "Medio", "Negativo", "Neutro"))
RF # Error rate: 31%
# Frequenze delle caratteristiche del Corpus
apply(textstat_summary(Corpus_Totale)[,2:11], 2, sum)
# VerrÃ  usato sia per il dizionario che per il semi-supervisionato
# Abbiamo generato delle ulteriori keywords di contesto
dim(Driver)
# VerrÃ  usato sia per il dizionario che per il semi-supervisionato
# Abbiamo generato delle ulteriori keywords di contesto
str(Driver)
apply(Driver_Conv_Rev[,3:6],2,sum) # Numero di testi etichettati per driver
prop.table(apply(Driver_Conv_Rev[,3:6],2,sum)) # Distribuzione dei driver
lenght(Driver$prezzo)
sapply(Driver@.Data, length)
str(Driver)
round(prop.table(table(predict(TextModel))), 2)*100 # % driver nel dataset
apply(DriverAnalysis, 2, function(x) sum(is.na(x)))
View(Brand_sentiment)
# DISTRIBUZIONE SENTIMENT PER BRAND
Brand_sentiment <- as.data.frame(table(Ita_StoresReview$Player, Ita_StoresReview$NB_sentiment))
Brand_sentiment <- rename(
Brand_sentiment,
"Brand" = "Var1",
"Sentiment" = "Var2"
)
sapply(Driver@.Data, length)
str(Driver)
Driver$names
View(Driver)
Driver@.Data$names
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# LIBRERIE ----
# Dataset
library(readxl)
library(writexl)
# Directory
library(rstudioapi)
# Pre-processing
library(quanteda)
library(quanteda.textstats)
library(SnowballC) # stemming delle keywords
# Driver Analysis
library(dplyr)
library(syuzhet)
library(newsmap)
# Algoritmi
library(naivebayes)
library(randomForest)
library(iml)
library(future)
library(future.callr)
library(e1071)
library(reshape2)
library(cvTools)
library(caret)
# Grafici
library(ggplot2)
library(gridExtra)
library(quanteda.textplots)
# Tabelle
library(kableExtra)
library(flextable)
library(officer)
View(Ita_StoresReview)
# Verifica celle vuote.
apply(Campione, 2, function(x) sum(is.na(x)))
sapply(Driver@.Data, length)
library(readxl)
library(writexl)
# Directory
library(rstudioapi)
# Pre-processing
library(quanteda)
library(quanteda.textstats)
library(SnowballC) # stemming delle keywords
# Driver Analysis
library(dplyr)
library(syuzhet)
library(newsmap)
# Algoritmi
library(naivebayes)
library(randomForest)
library(iml)
library(future)
library(future.callr)
library(e1071)
library(reshape2)
library(cvTools)
library(caret)
# Grafici
library(ggplot2)
library(gridExtra)
library(quanteda.textplots)
# Tabelle
library(kableExtra)
library(flextable)
library(officer)
# Verifica se sono complementari
setequal(Corpus_Totale, union(Test_Corpus, Training_Corpus))
