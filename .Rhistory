library(syuzhet)
library(newsmap)
# Algoritmi
library(naivebayes)
library(randomForest)
library(iml)
library(future)
library(future.callr)
library(e1071)
library(reshape2)
library(cvTools)
library(caret)
# Grafici
library(ggplot2)
library(gridExtra)
library(quanteda.textplots)
View(DriverAnalysis)
Esiti_algo_Test <- data.frame(
ID = attr(Test_Corpus, "docvars")$ID,
social = attr(Test_Corpus, "docvars")$social,
text = Test_Corpus,
Bayes = Test_predictedNB,
RF = Test_predictedRF,
SVM = Test_predictedSV
)
Df_sentiment <- data.frame(
ID = c(Training_Corpus$ID, Test_Corpus$ID),
NB_sentiment = c(Campione$sentiment, as.vector(Test_predictedNB))
)
Ita_StoresReview <- merge(Ita_StoresReview, Df_sentiment, by='ID')
View(Ita_StoresReview)
DriverAnalysis$doc_id <- NULL
View(DriverAnalysis)
View(Ita_StoresReview)
save.image("~/UFS/07 programmazione R/PROGETTO/R-Artigiani/Ambiente.RData")
Confronto_test
Confronto_test <- data.frame(
ID = attr(Test_Corpus, "docvars")$ID,
social = attr(Test_Corpus, "docvars")$social,
Test_Corpus,
Test_predictedNB,
Test_predictedRF,
Test_predictedSV)
View(Confronto_test)
set.seed(007)
AAP_test_data_places <- Confronto_test %>%
filter(social == 'places') %>%
slice_sample(n=40, replace = FALSE)
library(readxl)
library(writexl)
# Directory
library(rstudioapi)
# Pre-processing
library(quanteda)
library(quanteda.textstats)
library(SnowballC) # stemming delle keywords
# Driver Analysis
library(dplyr)
library(syuzhet)
library(newsmap)
# Algoritmi
library(naivebayes)
library(randomForest)
library(iml)
library(future)
library(future.callr)
library(e1071)
library(reshape2)
library(cvTools)
library(caret)
# Grafici
library(ggplot2)
library(gridExtra)
library(quanteda.textplots)
set.seed(007)
AAP_test_data_places <- Confronto_test %>%
filter(social == 'places') %>%
slice_sample(n=40, replace = FALSE)
# Con questo codice estraggo 40 random samples dal testing data con social == places
set.seed(007)
AAP_test_data_twitter <- Confronto_test %>%
filter(social == 'twitter') %>%
slice_sample(n=20, replace = FALSE)
AAP_test_data <- read_excel("aap_reviewed.xlsx")
View(AAP_test_data)
AAP_test_data$human_val <- ifelse(AAP_test_data$human_val  == -1, "Negativo",
ifelse(AAP_test_data$human_val  == 0, "Neutro",
"Positivo"))
View(AAP_test_data)
AAP_confronto <- data.frame(
Bayes = c(sum(AAP_test_data$Test_predictedNB == AAP_test_data$human_val),
sum(AAP_test_data$Test_predictedNB == AAP_test_data$human_val)/60*100),
RF = c(sum(AAP_test_data$Test_predictedRF == AAP_test_data$human_val),
sum(AAP_test_data$Test_predictedRF == AAP_test_data$human_val)/60*100),
SV = c(sum(AAP_test_data$Test_predictedSV == AAP_test_data$human_val),
sum(AAP_test_data$Test_predictedSV == AAP_test_data$human_val)/60*100)
)
View(AAP_confronto)
rownames(AAP_confronto) <- c("Freq Assoluta", "Freq Relativa")
View(AAP_confronto)
AAP_confronto <- data.frame(
Bayes = c(round(sum(AAP_test_data$Test_predictedNB == AAP_test_data$human_val),0),
sum(AAP_test_data$Test_predictedNB == AAP_test_data$human_val)/60*100),
RF = c(sum(AAP_test_data$Test_predictedRF == AAP_test_data$human_val),
sum(AAP_test_data$Test_predictedRF == AAP_test_data$human_val)/60*100),
SV = c(sum(AAP_test_data$Test_predictedSV == AAP_test_data$human_val),
sum(AAP_test_data$Test_predictedSV == AAP_test_data$human_val)/60*100)
)
View(AAP_confronto)
AAP_confronto <- data.frame(
Bayes = c(sum(AAP_test_data$Test_predictedNB == AAP_test_data$human_val),
sum(AAP_test_data$Test_predictedNB == AAP_test_data$human_val)/60*100),
RF = c(sum(AAP_test_data$Test_predictedRF == AAP_test_data$human_val),
sum(AAP_test_data$Test_predictedRF == AAP_test_data$human_val)/60*100),
SV = c(sum(AAP_test_data$Test_predictedSV == AAP_test_data$human_val),
sum(AAP_test_data$Test_predictedSV == AAP_test_data$human_val)/60*100)
)
rownames(AAP_confronto) <- c("Freq Assoluta", "Freq Relativa")
rownames(AAP_confronto) <- c("Freq Assoluta", "Freq Relativa")
View(AAP_confronto)
View(DriverAnalysis)
View(EmotionAnalysis)
table(Ita_StoresReview$Player, Ita_StoresReview$NB_sentiment)
library(readxl)
library(writexl)
# Directory
library(rstudioapi)
# Pre-processing
library(quanteda)
library(quanteda.textstats)
library(SnowballC) # stemming delle keywords
# Driver Analysis
library(dplyr)
library(syuzhet)
library(newsmap)
# Algoritmi
library(naivebayes)
library(randomForest)
library(iml)
library(future)
library(future.callr)
library(e1071)
library(reshape2)
library(cvTools)
library(caret)
# Grafici
library(ggplot2)
library(gridExtra)
library(quanteda.textplots)
View(Ita_StoresReview)
Brand_sentiment <- as.data.frame(table(Ita_StoresReview$Player, Ita_StoresReview$NB_sentiment))
View(Brand_sentiment)
View(Brand_sentiment)
Brand_sentiment <- rename(
Brand_sentiment,
"Brand" = "Var1",
"Sentiment" = "Var2"
)
ggplot(Brand_sentiment,aes(x = Brand, y = Freq, fill = Sentiment))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#993333", "grey", "darkseagreen")) +
labs(title = "Come varia il sentiment nelle diverse fonti dato?") +
#rappresentiamo le barre in orizzontale (inverte gli assi)
#coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Social")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
table(Ita_StoresReview$Player,Ita_StoresReview$NB_sentiment)
table(Ita_StoresReview$Player,Ita_StoresReview$NB_sentiment)
Brand_sentiment
table(Ita_StoresReview$Player,Ita_StoresReview$NB_sentiment)
rowmeans(table(Ita_StoresReview$Player,Ita_StoresReview$NB_sentiment))
rowMeans(table(Ita_StoresReview$Player,Ita_StoresReview$NB_sentiment))
Grafico1 <- rowMeans(table(Ita_StoresReview$Player,Ita_StoresReview$NB_sentiment))
Grafico1 <- as.data.frame(rowMeans(table(Ita_StoresReview$Player,Ita_StoresReview$NB_sentiment)))
View(Grafico1)
View(Grafico1)
rm(Grafico1)
Brand_sentiment <- as.data.frame(table(Ita_StoresReview$Player, Ita_StoresReview$NB_sentiment))
Brand_sentiment <- rename(
Brand_sentiment,
"Brand" = "Var1",
"Sentiment" = "Var2"
)
ggplot(Brand_sentiment,aes(x = Brand, y = Freq, fill = Sentiment))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#993333", "grey", "darkseagreen")) +
labs(title = "Come varia il sentiment nelle diverse fonti dato?") +
#rappresentiamo le barre in orizzontale (inverte gli assi)
#coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Social")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
ggplot(Brand_sentiment,aes(x = Brand, y = Freq, fill = Sentiment))+
geom_bar(position="dodge",stat="identity") +
scale_fill_manual(values = c("#993333", "grey", "darkseagreen")) +
labs(title = "Come varia il sentiment nelle diverse fonti dato?") +
#rappresentiamo le barre in orizzontale (inverte gli assi)
#coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Social")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
ggplot(Brand_sentiment,aes(x = Brand, y = Freq, fill = Sentiment))+
geom_bar(position="dodge",stat="identity") +
scale_fill_manual(values = c("#993333", "grey", "darkseagreen")) +
labs(title = "Come varia il sentiment nelle diverse fonti dato?") +
#rappresentiamo le barre in orizzontale (inverte gli assi)
#coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Sentiment")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
table(Ita_StoresReview$Player, Ita_StoresReview$NB_sentiment)
View(DriverAnalysis)
ggplot(Brand_sentiment,aes(x = Brand, y = Freq, fill = Sentiment))+
geom_bar(position="dodge",stat="identity") +
scale_fill_manual(values = c("#993333", "grey", "darkseagreen")) +
labs(title = "Come varia il sentiment nei diversi brand?") +
#rappresentiamo le barre in orizzontale (inverte gli assi)
#coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Sentiment")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
table(DriverAnalysis$Player, DriverAnalysis$social)
table(DriverAnalysis$Player, DriverAnalysis$social["places"])
library(kableExtra)
# LIBRERIE ----
install.packages("flextable")
# LIBRERIE ----
install.packages("officer")
flex_table_stores = data.frame(unclass(table(Ita_StoresReview$Player, Ita_StoresReview$NB_sentiment)))
flex_table_stores$media_rating = round(c(mean(Ita_StoresReview$score_rating[Ita_StoresReview$Player=='Euronics'],na.rm = TRUE),
mean(Ita_StoresReview$score_rating[Ita_StoresReview$Player=='Mediaworld'],na.rm = TRUE),
mean(Ita_StoresReview$score_rating[Ita_StoresReview$Player=='Unieuro'],na.rm = TRUE)), 2)
flex_table_stores = cbind(Player = c("Euronics", "Mediaworld", "Unieuro"), flex_table_stores)
flex_table_stores
set_flextable_defaults(
font.family = "Arial", font.size = 10,
border.color = "gray", big.mark = "")
library(flextable)
library(officer)
flex_table_stores = data.frame(unclass(table(Ita_StoresReview$Player, Ita_StoresReview$NB_sentiment)))
flex_table_stores$media_rating = round(c(mean(Ita_StoresReview$score_rating[Ita_StoresReview$Player=='Euronics'],na.rm = TRUE),
mean(Ita_StoresReview$score_rating[Ita_StoresReview$Player=='Mediaworld'],na.rm = TRUE),
mean(Ita_StoresReview$score_rating[Ita_StoresReview$Player=='Unieuro'],na.rm = TRUE)), 2)
flex_table_stores = cbind(Player = c("Euronics", "Mediaworld", "Unieuro"), flex_table_stores)
flex_table_stores
set_flextable_defaults(
font.family = "Arial", font.size = 10,
border.color = "gray", big.mark = "")
ft <- flextable(head(flex_table_stores)) |>
bold(part = "header")
ft
ft |>
bg(j = "media_rating",
bg = scales::col_quantile(palette = c("wheat", "red"), domain =NULL)) |>
add_footer_lines("God help us. R is not that nice. Almost as bad as SQL")
table(Ita_StoresReview$Player, Ita_StoresReview$score_rating)
hist(Ita_StoresReview$Player, Ita_StoresReview$score_rating)
hist(Ita_StoresReview$score_rating, Ita_StoresReview$Player)
rm(Grafico1)
table(Ita_StoresReview$Player, Ita_StoresReview$score_rating)
Brand_rating <- as.data.frame(table(Ita_StoresReview$Player, Ita_StoresReview$score_rating))
Brand_rating <- rename(
Brand_sentiment,
"Brand" = "Var1",
"Rating" = "Var2"
)
View(Brand_rating)
Brand_rating <- rename(
Brand_rating,
"Brand" = "Var1",
"Rating" = "Var2"
)
View(Brand_rating)
ggplot(Brand_rating, aes(x = Brand, y = Rating, fill = brand)) +
geom_violin() +
labs(title = "Distribuzione del rating per brand", x = "Brand", y = "Rating")
ggplot(Brand_rating, aes(x = Brand, y = Rating, fill = Brand)) +
geom_violin() +
labs(title = "Distribuzione del rating per brand", x = "Brand", y = "Rating")
ggplot(Brand_rating, aes(x = Brand, y = Rating, fill = Freq)) +
geom_violin() +
labs(title = "Distribuzione del rating per brand", x = "Brand", y = "Rating")
ggplot(Brand_rating,aes(x = Brand, y = Freq, fill = Rating))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#993333", "grey", "darkseagreen")) +
labs(title = "Come varia il sentiment nei diversi brand?") +
#rappresentiamo le barre in orizzontale (inverte gli assi)
#coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Rating")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
ggplot(Brand_rating,aes(x = Brand, y = Freq, fill = Rating))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#993333", "#FF5733", "#FFC300", "#DAF7A6", "#7FFF00")) +
labs(title = "Come varia il sentiment nei diversi brand?") +
#rappresentiamo le barre in orizzontale (inverte gli assi)
#coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Rating")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
ggplot(Brand_rating,aes(x = Brand, y = Freq, fill = Rating))+
geom_bar(position="dodge",stat="identity") +
scale_fill_manual(values = c("#993333", "#FF5733", "#FFC300", "#DAF7A6", "#7FFF00")) +
labs(title = "Come varia il sentiment nei diversi brand?") +
#rappresentiamo le barre in orizzontale (inverte gli assi)
#coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Rating")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
ggplot(Brand_rating,aes(x = Brand, y = Freq, fill = Rating))+
geom_bar(position="dodge",stat="identity") +
scale_fill_manual(values = c("#993333", "#FF5733", "#FFC300", "#DAF7A6", "#7FFF00")) +
labs(title = "Come varia il rating nei diversi brand?") +
#rappresentiamo le barre in orizzontale (inverte gli assi)
#coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Rating")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
ggplot(Brand_sentiment,aes(x = Brand, y = Freq, fill = Sentiment))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#993333", "grey", "darkseagreen")) +
labs(title = "Come varia il sentiment nei diversi brand?") +
#rappresentiamo le barre in orizzontale (inverte gli assi)
#coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Sentiment")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
ggplot(Brand_sentiment,aes(x = Brand, y = Freq, fill = Sentiment))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#993333", "grey", "darkseagreen")) +
labs(title = "Come varia il sentiment nei diversi brand?") +
coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Sentiment")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
# check
table(Ita_StoresReview$score_rating, Ita_StoresReview$NB_sentiment)
ross_tab <- table(Ita_StoresReview$NB_sentiment, Ita_StoresReview$score_rating)
# Creazione di un grafico a matrice di confusione
heatmap(cross_tab, col = cm.colors(256), main = "Matrice di confusione tra Sentiment e Rating")
rm(ross_tab)
cross_tab <- table(Ita_StoresReview$NB_sentiment, Ita_StoresReview$score_rating)
# Creazione di un grafico a matrice di confusione
heatmap(cross_tab, col = cm.colors(256), main = "Matrice di confusione tra Sentiment e Rating")
ggplot(Brand_sentiment,aes(x = Brand, y = Freq, fill = Sentiment))+
geom_bar(position="stack",stat="identity") +
scale_fill_manual(values = c("#993333", "grey", "darkseagreen")) +
labs(title = "Come varia il sentiment nei diversi brand?") +
coord_flip() +
ylab(label="Valori assoluti") +
xlab("") +
#la legenda viene generata in modo automatico
guides(fill=guide_legend(title="Sentiment")) +
theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
plot.subtitle = element_text(face = "plain"),
axis.title=element_text(size=10,face="plain"),
axis.text= element_text(size =10, face = "italic"),
axis.text.x = element_text(color="#993333", angle=45))
# Creazione di un grafico a matrice di confusione
heatmap(cross_tab, col = colorRampPalette(c("blue", "white", "red"))(256), main = "Matrice di confusione tra Sentiment e Rating")
heatmap(cross_tab, col = colorRampPalette(c("blue", "white", "red"))(256), main = "Matrice di confusione tra Sentiment e Rating")
legend("topright", legend = c("Basso", "Medio", "Alto"), fill = c("blue", "white", "red"), title = "Rating")
# Creazione del grafico a barre
ggplot(data = DriverAnalysis, aes(x = Player, y = sentimentAnalysis, fill = SemiSupervised)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Media del Sentiment_analysis per Player e Driver", x = "Player", y = "Sentiment_analysis")
ggplot(data = tuo_dataset, aes(x = "", fill = Sentiment_labels)) +
geom_bar(width = 1) +
facet_grid(. ~ Player + Driver) +
# TORTA
ggplot(data = DriverAnalysis, aes(x = "", fill = sentiment_labels)) +
geom_bar(width = 1) +
facet_grid(. ~ Player + SemiSupervised) +
labs(title = "Distribuzione di Sentiment_labels per Player e Driver", fill = "Sentiment_labels")
# TORTA
ggplot(data = DriverAnalysis, aes(x = "", fill = sentiment_labels)) +
geom_bar(width = 1) +
facet_grid(. ~ Player + SemiSupervised) +
labs(title = "Distribuzione di Sentiment_labels per Player e Driver", fill = "Sentiment_labels")
ggplot(data = DriverAnalysis, aes(x = score_rating, y = sentimentAnalysis, color = SemiSupervised)) +
geom_point() +
facet_wrap(~Player) +
labs(title = "Relazione tra Rating e Sentiment_analysis per Player e Driver", x = "Rating", y = "Sentiment_analysis")
Dati_Prezzo <- DriverAnalysis %>%
group_by(sentiment_labels) %>%
summarise(count = sum(n())/nrow(DriverAnalysis))
View(Dati_Prezzo)
ggplot(data = Dati_Prezzo, aes(x = "", y = count, fill = sentiment_labels)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_void()
Torta_Prezzo <- ggplot(data = Dati_Prezzo, aes(x = "", y = count, fill = sentiment_labels)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_void()
View(Dati_Prezzo)
Dati_Prezzo <- DriverAnalysis %>%
group_by(sentiment_labels & SemiSupervised) %>%
summarise(count = sum(n())/nrow(DriverAnalysis))
Dati_Prezzo <- DriverAnalysis[DriverAnalysis$SemiSupervised == "prezzo",] %>%
group_by(sentiment_labels) %>%
summarise(count = sum(n())/nrow(DriverAnalysis))
Torta_Prezzo <- ggplot(data = Dati_Prezzo, aes(x = "", y = count, fill = sentiment_labels)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_void()
View(DriverAnalysis)
Dati_Prezzo <- DriverAnalysis[DriverAnalysis$SemiSupervised == "prezzo",] %>%
group_by(sentiment_labels) %>%
summarise(count = sum(n())/nrow(DriverAnalysis))
Torta_Prezzo <- ggplot(data = Dati_Prezzo, aes(x = "", y = count, fill = sentiment_labels)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_void()
Dati_Servizio <- DriverAnalysis[DriverAnalysis$SemiSupervised == "servizio",] %>%
group_by(sentiment_labels) %>%
summarise(count = sum(n())/nrow(DriverAnalysis))
Torta_Servizio <- ggplot(data = Dati_Servizio, aes(x = "", y = count, fill = sentiment_labels)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_void()
Dati_Ordini <- DriverAnalysis[DriverAnalysis$SemiSupervised == "ordini",] %>%
group_by(sentiment_labels) %>%
summarise(count = sum(n())/nrow(DriverAnalysis))
Torta_Ordini <- ggplot(data = Dati_Ordini, aes(x = "", y = count, fill = sentiment_labels)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_void()
Dati_Location <- DriverAnalysis[DriverAnalysis$SemiSupervised == "location",] %>%
group_by(sentiment_labels) %>%
summarise(count = sum(n())/nrow(DriverAnalysis))
Torta_Location <- ggplot(data = Dati_Location, aes(x = "", y = count, fill = sentiment_labels)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_void()
grid.arrange(Torta_Prezzo, Torta_Servizio, Torta_Ordini, Torta_Location)
grid.arrange(Prezzo = Torta_Prezzo, Servizio = Torta_Servizio, Ordini = Torta_Ordini, Location = Torta_Location)
rm(Torta_Location)
rm(Torta_Ordini)
rm(Torta_Prezzo)
rm(Torta_Servizio)
rm(Dati_Location)
rm(Dati_Ordini)
rm(Dati_Servizio)
rm(Dati_Prezzo)
