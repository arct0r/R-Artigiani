df_measures_SVM<-paste0("conf.mat.sv",i)
assign(df_measures_SVM,df)
}
AverageAccuracy_NB
AverageF1_NB
for(i in 1:k){
Matrice_Training <-
Matrice_Training2 [folds$subsets[folds$which != i], ]
ValidationSet <-
Matrice_Training2 [folds$subsets[folds$which == i], ]
set.seed(300)
SupportVectorMachine<- svm(
y= Dfm_Training[folds$subsets[folds$which != i], ]
@docvars$sentiment,
x=Matrice_Training, kernel='linear', cost = 1)
Prediction_SVM <- predict(SupportVectorMachine,
newdata=ValidationSet)
class_table <- table("Predictions"= Prediction_SVM,
"Actual"=Dfm_Training[folds$subsets[folds$which == i], ]@docvars$sentiment)
print(class_table)
df<-confusionMatrix( class_table, mode = "everything")
df_measures_SVM<-paste0("conf.mat.sv",i)
assign(df_measures_SVM,df)
}
for(i in 1:k){
Matrice_Training <-
Matrice_Training2 [folds$subsets[folds$which != i], ]
ValidationSet <-
Matrice_Training2 [folds$subsets[folds$which == i], ]
set.seed(300)
SupportVectorMachine<- svm(
y= Dfm_Training[folds$subsets[folds$which != i], ]
@docvars$sentiment,
x=Matrice_Training, kernel='linear', cost = 1)
Prediction_SVM <- predict(SupportVectorMachine,
newdata=ValidationSet)
class_table <- table("Predictions"= Prediction_SVM,
"Actual"=Dfm_Training[folds$subsets[folds$which == i], ]@docvars$sentiment)
print(class_table)
df<-confusionMatrix( class_table, mode = "everything")
df_measures_SVM<-paste0("conf.mat.sv",i)
assign(df_measures_SVM,df)
}
SVM_Prediction <- data.frame(col1=vector(), col2=vector(), col3=vector(), col4=vector())
for(i in mget(ls(pattern = "conf.mat.sv")) ) {
Accuracy <-(i)$overall[1]
p <- as.data.frame((i)$byClass)
F1_negative <- p$F1[1]
F1_neutral <- p$F1[2]
F1_positive <- p$F1[3]
SVM_Prediction <- rbind(SVM_Prediction , cbind(Accuracy , F1_negative ,
F1_neutral, F1_positive ))
}
str(SVM_Prediction)
SVM_Prediction [is.na(SVM_Prediction)] <- 0
AverageAccuracy_SVM <- mean(SVM_Prediction[, 1] )
AverageF1_SVM<- mean(colMeans(SVM_Prediction[-1] ))
AverageAccuracy_SVM
AverageF1_SVM
AccNB <- as.data.frame(AverageAccuracy_NB )
colnames(AccNB)[1] <- "NB"
#Creo un dataframe per RF
AccRF <- as.data.frame(AverageAccuracy_RF )
#Rinomino la colonna
colnames(AccRF)[1] <- "RF"
#Creo un dataframe per SVM
AccSVM<- as.data.frame(AverageAccuracy_SVM )
#Rinomino la colonna
colnames(AccSVM)[1] <- "SVM"
#Unisco in un unico dataframe i valori di accuracy dei tre modelli
Accuracy_models <- cbind(AccNB, AccRF, AccSVM)
Accuracy_models
set.seed(123)
NaiveBayesModel <- multinomial_naive_bayes(x=Matrice_Training,
y=Dfm_Training@docvars$sentiment,
laplace = 2)
for(i in 1:k){
Matrice_Training <-
Matrice_Training2 [folds$subsets[folds$which != i], ]
ValidationSet <-
Matrice_Training2 [folds$subsets[folds$which == i], ]
set.seed(200)
NaiveBayesModel <- multinomial_naive_bayes(
y= Dfm_Training[folds$subsets[folds$which != i], ]
@docvars$sentiment ,
x=Matrice_Training, laplace = 2)
Predictions_NB <- predict(NaiveBayesModel,
newdata = ValidationSet,
type = "class")
class_table <- table("Predictions"= Predictions_NB,
"Actual"=Dfm_Training[folds$subsets[folds$which == i], ]@docvars$sentiment)
print(class_table)
df<-confusionMatrix( class_table, mode = "everything")
df_measures_NB<-paste0("conf.mat.nb",i)
assign(df_measures_NB,df)
}
NB_Prediction <- data.frame(col1=vector(), col2=vector(), col3=vector(), col4=vector())
for(i in mget(ls(pattern = "conf.mat.nb")) ) {
Accuracy <-(i)$overall[1]
p <- as.data.frame((i)$byClass)
F1_negative <- p$F1[1]
F1_neutral <- p$F1[2]
F1_positive <- p$F1[3]
NB_Prediction <- rbind(NB_Prediction , cbind(Accuracy , F1_negative ,
F1_neutral, F1_positive ))
}
NB_Prediction [is.na(NB_Prediction )] <- 0
AverageAccuracy_NB <- mean(NB_Prediction[, 1] )
AverageF1_NB<- mean(colMeans(NB_Prediction[-1] ))
AverageAccuracy_NB
AverageF1_NB
set.seed(200)
#Definiamo un oggetto k che indichi il numero di folders
k <- 5
#Dividiamo la matrice in k folders
folds <- cvFolds(NROW(Matrice_Training2), K = k)
for(i in 1:k){
Matrice_Training <-
Matrice_Training2 [folds$subsets[folds$which != i], ]
ValidationSet <-
Matrice_Training2 [folds$subsets[folds$which == i], ]
set.seed(200)
NaiveBayesModel <- multinomial_naive_bayes(
y= Dfm_Training[folds$subsets[folds$which != i], ]
@docvars$sentiment ,
x=Matrice_Training, laplace = 1)
Predictions_NB <- predict(NaiveBayesModel,
newdata = ValidationSet,
type = "class")
class_table <- table("Predictions"= Predictions_NB,
"Actual"=Dfm_Training[folds$subsets[folds$which == i], ]@docvars$sentiment)
print(class_table)
df<-confusionMatrix( class_table, mode = "everything")
df_measures_NB<-paste0("conf.mat.nb",i)
assign(df_measures_NB,df)
}
NB_Prediction <- data.frame(col1=vector(), col2=vector(), col3=vector(), col4=vector())
#Riempiamo il dataset con i valori di accuracy e f1
for(i in mget(ls(pattern = "conf.mat.nb")) ) {
Accuracy <-(i)$overall[1]
p <- as.data.frame((i)$byClass)
F1_negative <- p$F1[1]
F1_neutral <- p$F1[2]
F1_positive <- p$F1[3]
NB_Prediction <- rbind(NB_Prediction , cbind(Accuracy , F1_negative ,
F1_neutral, F1_positive ))
}
#guardiamo la struttura
str(NB_Prediction)
NB_Prediction [is.na(NB_Prediction )] <- 0
AverageAccuracy_NB <- mean(NB_Prediction[, 1] )
AverageF1_NB<- mean(colMeans(NB_Prediction[-1] ))
AverageAccuracy_NB
AverageF1_NB
AccNB <- as.data.frame(AverageAccuracy_NB )
colnames(AccNB)[1] <- "NB"
#Creo un dataframe per RF
AccRF <- as.data.frame(AverageAccuracy_RF )
#Rinomino la colonna
colnames(AccRF)[1] <- "RF"
#Creo un dataframe per SVM
AccSVM<- as.data.frame(AverageAccuracy_SVM )
#Rinomino la colonna
colnames(AccSVM)[1] <- "SVM"
#Unisco in un unico dataframe i valori di accuracy dei tre modelli
Accuracy_models <- cbind(AccNB, AccRF, AccSVM)
Accuracy_models
Accuracy_models_Melt <-melt(Accuracy_models)
str(Accuracy_models_Melt)
plot_accuracy <- ggplot(Accuracy_models_Melt, aes(x=variable, y=value, color = variable)) +
geom_boxplot() + xlab("Algorithm") + ylab(label="Values of accuracy") +
labs(title = "Cross-validation with k =5: values of accuracy") + coord_flip() +
theme_bw() +
guides(color=guide_legend(title="Algorithms")) +
theme(plot.title = element_text(color = "black", size = 12, face = "italic"),
axis.title.x =element_text(size=12,face="bold"),
axis.title.y =element_text(size=12, face = "plain"),
axis.text= element_text(size =10, face = "italic")
)
F1NB <- as.data.frame(AverageF1_NB)
colnames(F1NB)[1] <- "NB"
#RF
F1RF<- as.data.frame(AverageF1_RF )
colnames(F1RF)[1] <- "RF"
#SVM
F1SVM <- as.data.frame(AverageF1_SVM)
colnames(F1SVM)[1] <- "SVM"
#DATAFRAME
f1_models <- cbind(F1NB, F1RF, F1SVM)
f1_models
f1_models_melt <-melt(f1_models)
plot_f1 <- ggplot(f1_models_melt, aes(x=variable, y=value, color = variable)) +
geom_boxplot() + xlab("Algorithm") + ylab(label="Values of f1") +
labs(title = "Cross-validation with k =5: values of f1") + coord_flip() +
theme_bw() +
guides(color=guide_legend(title="Algorithms")) +
theme(plot.title = element_text(color = "black", size = 12, face = "italic"),
axis.title.x =element_text(size=12,face="bold"),
axis.title.y =element_text(size=12, face = "plain"),
axis.text= element_text(size =10, face = "italic")
)
grid.arrange(plot_accuracy, plot_f1, nrow=2) #bayes
# Dataset
library(readxl)
library(writexl)
# Directory
library(rstudioapi)
# Pre-processing
library(quanteda)
library(quanteda.textstats)
# Algoritmi
library(naivebayes)
library(randomForest)
library(iml)
library(future)
library(future.callr)
library(e1071)
library(reshape2)
library(cvTools)
library(caret)
# Grafici
library(ggplot2)
library(gridExtra)
library(quanteda.textplots)
Driver <- dictionary(list(Prezzo = c("offert*","scont*","prezz*","vend*","cost*","sottocost*", "economic*"),
Servizio = c("personal*","serviz*","gentil*","professional*","competent*","aiut*","cortes*","assistent*","disponibil*","cordial*",
"scortes*","male*","lent*","disorg*","disorie*"),
Ordini = c("ordin*","consegn*","ritir*","garanz*","online*","spedi*","reso","account"),
Location = c("negoz*","post*","parchegg*","affollat*","piccol*","disord*")))
Driver_Review <- dfm_lookup(Dfm_Totale,Driver)
Driver_Review
Driver_Conv_Rev <- convert(Driver_Review, to = "data.frame")
apply(Driver_Conv_Rev[,2:5],2,sum)
Driver <- dictionary(list(Prezzo = c("Promozione", "Risparmio", "qualità", "prezzo", "Economicità",
"economico", "concorrenziali", "sconto",
"Offerta", "Budget", "ragionevole","costo", "sostenibile",
"convenienti", "sottocosto"),
Servizio =  c("Rapidità", "Empatia", "Professionale", "Supporto",
"Risoluzione","problemi",  "Cordialità", "Assistenza", "vendita",
"immediata", "Efficienza", "cortese", "reclami",
"Competenza", "cliente", "Flessibilità", "Tempestività",
"Servizio", "Accoglienza", "caloroso", "gentile", "personal", "competente", "disponibile", "male",
"lento", "disorganizzato", "disordinato", "scortese", "cafone", "garanzia", "reso", "account"),
Ordini = c("Transazione", "acquisto", "pagamento", "Tempo", "consegna",
"ordine", "Opzioni", "Modalità", "ritiro",
"Rimborso", "Conferma", "Tracciabilità", "Facilità",
"Catalogo", "online","checkout", "Selezione",
"Personalizzazione", "veloce", "garantita", "garanzia", "reso", "account"),
Location = c("Accesso", "Facilitato", "Ampio", "Parcheggio", "Zona", "geografica",
"ambiente", "accogliente", "Strutture", "moderne",
"Punto", "vendita", "Facilità", "raggiungimento", "Accessibilità", "disabili",
"Prossimità","area", "centrale", "Sicurezza", "Atmosfera", "piacevole", "Posizione","strategica",
"illuminata", "Spazio", "Facile",
"tranquilla", "negozio", "posto", "affollato", "piccolo", "disordinato")))
Driver_Review <- dfm_lookup(Dfm_Totale,Driver)
Driver_Review
Driver_Conv_Rev <- convert(Driver_Review, to = "data.frame")
apply(Driver_Conv_Rev[,2:5],2,sum)
# LIBRERIE ----
install.packages("SnowballC")
library(SnowballC)
Driver <- dictionary(list(Prezzo = c("Promozione", "Risparmio", "qualità", "prezzo", "Economicità",
"economico", "concorrenziali", "sconto",
"Offerta", "Budget", "ragionevole","costo", "sostenibile",
"convenienti", "sottocosto"),
Servizio =  c("Rapidità", "Empatia", "Professionale", "Supporto",
"Risoluzione","problemi",  "Cordialità", "Assistenza", "vendita",
"immediata", "Efficienza", "cortese", "reclami",
"Competenza", "cliente", "Flessibilità", "Tempestività",
"Servizio", "Accoglienza", "caloroso", "gentile", "personal", "competente", "disponibile", "male",
"lento", "disorganizzato", "disordinato", "scortese", "cafone", "garanzia", "reso", "account"),
Ordini = c("Transazione", "acquisto", "pagamento", "Tempo", "consegna",
"ordine", "Opzioni", "Modalità", "ritiro",
"Rimborso", "Conferma", "Tracciabilità", "Facilità",
"Catalogo", "online","checkout", "Selezione",
"Personalizzazione", "veloce", "garantita", "garanzia", "reso", "account"),
Location = c("Accesso", "Facilitato", "Ampio", "Parcheggio", "Zona", "geografica",
"ambiente", "accogliente", "Strutture", "moderne",
"Punto", "vendita", "Facilità", "raggiungimento", "Accessibilità", "disabili",
"Prossimità","area", "centrale", "Sicurezza", "Atmosfera", "piacevole", "Posizione","strategica",
"illuminata", "Spazio", "Facile",
"tranquilla", "negozio", "posto", "affollato", "piccolo", "disordinato")))
Driver <- lapply(Driver, function(x) wordStem(x))
Driver
Driver <- dictionary(list(Prezzo = c("Promozione", "Risparmio", "qualità", "prezzo", "Economicità",
"economico", "concorrenziali", "sconto",
"Offerta", "Budget", "ragionevole","costo", "sostenibile",
"convenienti", "sottocosto"),
Servizio =  c("Rapidità", "Empatia", "Professionale", "Supporto",
"Risoluzione","problemi",  "Cordialità", "Assistenza", "vendita",
"immediata", "Efficienza", "cortese", "reclami",
"Competenza", "cliente", "Flessibilità", "Tempestività",
"Servizio", "Accoglienza", "caloroso", "gentile", "personal", "competente", "disponibile", "male",
"lento", "disorganizzato", "disordinato", "scortese", "cafone", "garanzia", "reso", "account"),
Ordini = c("Transazione", "acquisto", "pagamento", "Tempo", "consegna",
"ordine", "Opzioni", "Modalità", "ritiro",
"Rimborso", "Conferma", "Tracciabilità", "Facilità",
"Catalogo", "online","checkout", "Selezione",
"Personalizzazione", "veloce", "garantita", "garanzia", "reso", "account"),
Location = c("Accesso", "Facilitato", "Ampio", "Parcheggio", "Zona", "geografica",
"ambiente", "accogliente", "Strutture", "moderne",
"Punto", "vendita", "Facilità", "raggiungimento", "Accessibilità", "disabili",
"Prossimità","area", "centrale", "Sicurezza", "Atmosfera", "piacevole", "Posizione","strategica",
"illuminata", "Spazio", "Facile",
"tranquilla", "negozio", "posto", "affollato", "piccolo", "disordinato")))
Driver$Prezzo <- wordStem(Driver$Prezzo)
Driver$Servizio <- wordStem(Driver$Servizio)
Driver$Ordini <- wordStem(Driver$Ordini)
Driver$Location <- wordStem(Driver$Location)
Driver
Driver <- dictionary(list(Prezzo = c("promozione", "risparmio", "qualità", "prezzo", "economicità",
"economico", "concorrenziali", "sconto",
"offerta", "budget", "ragionevole","costo", "sostenibile",
"convenienti", "sottocosto"),
Servizio =  c("rapidità", "Empatia", "professionale", "supporto",
"risoluzione","problemi",  "cordialità", "assistenza", "vendita",
"immediata", "efficienza", "cortese", "reclami",
"competenza", "cliente", "flessibilità", "tempestività",
"servizio", "accoglienza", "caloroso", "gentile", "personal", "competente", "disponibile", "male",
"lento", "disorganizzato", "disordinato", "scortese", "cafone", "garanzia", "reso", "account"),
Ordini = c("transazione", "acquisto", "pagamento", "tempo", "consegna",
"ordine", "opzioni", "modalità", "ritiro",
"rimborso", "conferma", "tracciabilità", "facilità",
"catalogo", "online","checkout", "Ssntita", "garanzia", "reso", "account"),
Location = c("accesso", "facilitato", "ampio", "parcheggio", "zona", "geografica",
"ambiente", "accogliente", "strutture", "moderne",
"punto", "vendita", "facilità", "raggiungimento", "accessibilità", "disabili",
"prossimità","area", "centrale", "sicurezza", "atmosfera", "piacevole", "posizione","strategica",
"illuminata", "spazio", "facile",
"tranquilla", "negozio", "posto", "affollato", "piccolo", "disordinato")))
Driver$Prezzo <- wordStem(Driver$Prezzo)
Driver$Servizio <- wordStem(Driver$Servizio)
Driver$Ordini <- wordStem(Driver$Ordini)
Driver$Location <- wordStem(Driver$Location)
Driver
Driver <- dictionary(list(Prezzo = c("promozione", "risparmio", "qualità", "prezzo", "economicità",
"economico", "concorrenziali", "sconto",
"offerta", "budget", "ragionevole","costo", "sostenibile",
"convenienti", "sottocosto"),
Servizio =  c("rapidità", "Empatia", "professionale", "supporto",
"risoluzione","problemi",  "cordialità", "assistenza", "vendita",
"immediata", "efficienza", "cortese", "reclami",
"competenza", "cliente", "flessibilità", "tempestività",
"servizio", "accoglienza", "caloroso", "gentile", "personal", "competente", "disponibile", "male",
"lento", "disorganizzato", "disordinato", "scortese", "cafone", "garanzia", "reso", "account"),
Ordini = c("transazione", "acquisto", "pagamento", "tempo", "consegna",
"ordine", "opzioni", "modalità", "ritiro",
"rimborso", "conferma", "tracciabilità", "facilità",
"catalogo", "online","checkout", "Ssntita", "garanzia", "reso", "account"),
Location = c("accesso", "facilitato", "ampio", "parcheggio", "zona", "geografica",
"ambiente", "accogliente", "strutture", "moderne",
"punto", "vendita", "facilità", "raggiungimento", "accessibilità", "disabili",
"prossimità","area", "centrale", "sicurezza", "atmosfera", "piacevole", "posizione","strategica",
"illuminata", "spazio", "facile",
"tranquilla", "negozio", "posto", "affollato", "piccolo", "disordinato")))
Driver <- dictionary(list(prezzo = c("promozione", "risparmio", "qualità", "prezzo", "economicità",
"economico", "concorrenziali", "sconto",
"offerta", "budget", "ragionevole","costo", "sostenibile",
"convenienti", "sottocosto"),
servizio =  c("rapidità", "Empatia", "professionale", "supporto",
"risoluzione","problemi",  "cordialità", "assistenza", "vendita",
"immediata", "efficienza", "cortese", "reclami",
"competenza", "cliente", "flessibilità", "tempestività",
"servizio", "accoglienza", "caloroso", "gentile", "personal", "competente", "disponibile", "male",
"lento", "disorganizzato", "disordinato", "scortese", "cafone", "garanzia", "reso", "account"),
ordini = c("transazione", "acquisto", "pagamento", "tempo", "consegna",
"ordine", "opzioni", "modalità", "ritiro",
"rimborso", "conferma", "tracciabilità", "facilità",
"catalogo", "online","checkout", "Ssntita", "garanzia", "reso", "account"),
location = c("accesso", "facilitato", "ampio", "parcheggio", "zona", "geografica",
"ambiente", "accogliente", "strutture", "moderne",
"punto", "vendita", "facilità", "raggiungimento", "accessibilità", "disabili",
"prossimità","area", "centrale", "sicurezza", "atmosfera", "piacevole", "posizione","strategica",
"illuminata", "spazio", "facile",
"tranquilla", "negozio", "posto", "affollato", "piccolo", "disordinato")))
stem_words <- function(words) {
stemmed_words <- wordStem(words, language = "italian")
return(stemmed_words)
}
Driver$prezzo <- stem_words(prezzo)
str(Driver)
View(Driver_Conv_Rev)
Driver$prezzo <- stem_words(prezzo)
Driver$servizio <- stem_words(servizio)
Driver$prezzo <- stem_words(Driver$prezzo)
Driver$servizio <- stem_words(servizio)
Driver$servizio <- stem_words(Driver$servizio)
Driver$ordini <- stem_words(Driver$ordini)
Driver$location <- stem_words(Driver$location)
Driver
Driver_Review <- dfm_lookup(Dfm_Totale,Driver)
Driver_Conv_Rev <- convert(Driver_Review, to = "data.frame")
apply(Driver_Conv_Rev[,2:5],2,sum)
# LIBRERIE ----
# Dataset
library(readxl)
library(writexl)
# Directory
library(rstudioapi)
# Pre-processing
library(quanteda)
library(quanteda.textstats)
library(SnowballC)
# Algoritmi
library(naivebayes)
library(randomForest)
library(iml)
library(future)
library(future.callr)
library(e1071)
library(reshape2)
library(cvTools)
library(caret)
# Grafici
library(ggplot2)
library(gridExtra)
library(quanteda.textplots)
View(Driver_Conv_Rev)
Driver_Conv_Rev <- cbind(Dfm_Totale@docvars$ID, Driver_Conv_Rev)
View(Driver_Conv_Rev)
# Manipolazione
library(dplyr)
DriverAnalysis <- full_join(Driver_Conv_Rev, Ita_StoresReview)
View(Driver_Conv_Rev)
Driver_Conv_Rev <- convert(Driver_Review, to = "data.frame")
Driver_Conv_Rev <- cbind(ID = Dfm_Totale@docvars$ID, Driver_Conv_Rev)
View(Driver_Conv_Rev)
DriverAnalysis <- full_join(Driver_Conv_Rev, Ita_StoresReview)
View(DriverAnalysis)
DriverAnalysis <- full_join(Ita_StoresReview, DriverAnalysis)
View(DriverAnalysis)
# LIBRERIE ----
install.packages("syuzhet")
library(syuzhet)
Dizionario <- get_sentiment_dictionary(dictionary = 'nrc',
language = "italian")
apply(Driver_Conv_Rev[,2:5],2,sum)
Driver <- dictionary(list(prezzo = c("promozione", "risparmio", "qualità", "prezzo", "economicità",
"economico", "concorrenziali", "sconto",
"offerta", "budget", "ragionevole","costo", "sostenibile",
"convenienti", "sottocosto"),
servizio =  c("rapidità", "Empatia", "professionale", "supporto",
"risoluzione","problemi",  "cordialità", "assistenza", "vendita",
"immediata", "efficienza", "cortese", "reclami",
"competenza", "cliente", "flessibilità", "tempestività",
"servizio", "accoglienza", "caloroso", "gentile", "personal", "competente", "disponibile", "male",
"lento", "disorganizzato", "disordinato", "scortese", "cafone", "garanzia", "reso", "account"),
ordini = c("transazione", "acquisto", "pagamento", "tempo", "consegna",
"ordine", "opzioni", "modalità", "ritiro",
"rimborso", "conferma", "tracciabilità", "facilità",
"catalogo", "online","checkout", "Ssntita", "garanzia", "reso", "account"),
location = c("accesso", "facilitato", "ampio", "parcheggio", "zona", "geografica",
"ambiente", "accogliente", "strutture", "moderne",
"punto", "vendita", "facilità", "raggiungimento", "accessibilità", "disabili",
"prossimità","area", "centrale", "sicurezza", "atmosfera", "piacevole", "posizione","strategica",
"illuminata", "spazio", "facile",
"tranquilla", "negozio", "posto", "affollato", "piccolo", "disordinato")))
Driver$prezzo <- stem_words(Driver$prezzo)
Driver$servizio <- stem_words(Driver$servizio)
Driver$ordini <- stem_words(Driver$ordini)
Driver$location <- stem_words(Driver$location)
Driver_Review <- dfm_lookup(Dfm_Totale,Driver)
Driver_Conv_Rev <- convert(Driver_Review, to = "data.frame")
Driver_Conv_Rev <- cbind(ID = Dfm_Totale@docvars$ID, Driver_Conv_Rev)
apply(Driver_Conv_Rev[,2:5],2,sum)
View(Driver_Conv_Rev)
apply(Driver_Conv_Rev[,3:5],2,sum)
apply(Driver_Conv_Rev[,3:6],2,sum)
Driver <- dictionary(list(prezzo = c("promozione", "risparmio", "qualità", "prezzo", "economicità",
"economico", "concorrenziali", "sconto",
"offerta", "budget", "ragionevole","costo", "sostenibile",
"convenienti", "sottocosto", "eccezional", "super", "miglior", "ben",
"top", "futur", "offert", "convenient", "risparm", "assurd", "super", "pazzesc", "gratis"),
servizio =  c("rapidità", "Empatia", "professionale", "supporto",
"risoluzione","problemi",  "cordialità", "assistenza", "vendita",
"immediata", "efficienza", "cortese", "reclami",
"competenza", "cliente", "flessibilità", "tempestività",
"servizio", "accoglienza", "caloroso", "gentile", "personal", "competente", "disponibile", "male",
"lento", "disorganizzato", "disordinato", "scortese", "cafone", "garanzia", "reso", "account",
"signor", "reparto", "richiest", "graz", "eccezional", "inform", "miglior", "ragazz",
"rispost", "gent", "gentilissim", "rispett", "competent", "bell", "ringraz", "aiut",
"pront", "addett", "pessim", "pazienz", "ore", "benissim", "purtropp", "purtropp", "problem",
"incompetent", "rivolg", "compl", "ben", "consigl", "prossim", "buon", "gentilezz", "educ",
"simpat", "dispon", "attenzion", "qualif", "aspett", "grandissim", "disponibil", "esigent", "top",
"giovan", "assist", "futur", "risolt", "bravissim", "commess", "brav", "spieg", "dubb", "vergogn",
"inutil", "maleduc", "pochissim", "signorin", "bellissim", "perfett", "attent", "super",
"pazzesc", "soluzion", "difett", "truff", "qualit", "normal", "scortes", "intelligent"),
ordini = c("transazione", "acquisto", "pagamento", "tempo", "consegna",
"ordine", "opzioni", "modalità", "ritiro",
"rimborso", "conferma", "tracciabilità", "facilità",
"catalogo", "online","checkout", "garanzia", "reso", "account", "bell", "pessim", "nuov",
"benissim", "purtropp", "problem", "ben", "buon", "aspett", "attesa", "top", "futur", "risolt",
"vergogn", "inutil", "bellissim", "assurd", "super", "difett", "truff"),
location = c("accesso", "facilitato", "ampio", "parcheggio", "zona", "geografica",
"ambiente", "accogliente", "strutture", "moderne",
"punto", "vendita", "facilità", "raggiungimento", "accessibilità", "disabili",
"prossimità","area", "centrale", "sicurezza", "atmosfera", "piacevole", "posizione","strategica",
"illuminata", "spazio", "facile",
"tranquilla", "negozio", "posto", "affollato", "piccolo", "disordinato", "bell", "ben")))
Driver$prezzo <- stem_words(Driver$prezzo)
Driver$servizio <- stem_words(Driver$servizio)
Driver$ordini <- stem_words(Driver$ordini)
Driver$location <- stem_words(Driver$location)
Driver_Review <- dfm_lookup(Dfm_Totale,Driver)
Driver_Conv_Rev <- convert(Driver_Review, to = "data.frame")
Driver_Conv_Rev <- cbind(ID = Dfm_Totale@docvars$ID, Driver_Conv_Rev)
apply(Driver_Conv_Rev[,3:6],2,sum)
DriverAnalysis <- full_join(Ita_StoresReview, DriverAnalysis)
Dizionario <- get_sentiment_dictionary(dictionary = 'nrc',
language = "italian")
Store_reviews_sentiment <- get_sentiment(Corpus_Totale,
method = 'nrc', language = "italian")
